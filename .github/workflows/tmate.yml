name: vps

on:
  workflow_dispatch:
  repository_dispatch:
    types: [create-vps]

jobs:
  deploy-vps:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v3

      - name: 📁 Create dirs for backup & links
        run: mkdir -p links .backup

      - name: 💾 Restore old VPS backup if any
        run: |
          name="${{ github.event.client_payload.vps_name || 'manual-vps' }}"
          if [ "${{ github.event.client_payload.backup }}" == "true" ]; then
            echo "📦 Restoring backup..."
            unzip ".backup/$name.zip" -d / || echo "⚠️ No backup to restore."

      - name: 🧱 Install dependencies & Pterodactyl Panel
        run: |
          echo "🚀 Installing Pterodactyl Panel..."
          apt update -y && apt upgrade -y
          apt install -y nginx mysql-server php php-fpm php-mysql php-cli php-curl php-mbstring php-xml php-bcmath unzip curl tar composer

          # Setup MySQL
          mysql -e "CREATE DATABASE panel;"
          mysql -e "CREATE USER 'ptero'@'localhost' IDENTIFIED BY 'password';"
          mysql -e "GRANT ALL PRIVILEGES ON panel.* TO 'ptero'@'localhost';"
          mysql -e "FLUSH PRIVILEGES;"

          # Download panel
          cd /var/www
          curl -Lo panel.tar.gz https://github.com/pterodactyl/panel/releases/latest/download/panel.tar.gz
          tar -xzvf panel.tar.gz
          mv panel public_html
          cd public_html

          cp .env.example .env
          composer install --no-dev --optimize-autoloader
          php artisan key:generate --force
          php artisan p:environment:setup --author="you@example.com" --app-url="https://${{ secrets.CF_RECORD_NAME }}" --timezone="Asia/Kolkata" --cache=true --session=true --queue=true --force
          php artisan p:database:setup --host=127.0.0.1 --port=3306 --database=panel --username=ptero --password=password --hostport=3306 --force
          php artisan migrate --seed --force
          chown -R www-data:www-data /var/www/public_html
          chmod -R 755 /var/www/public_html

          # Setup Nginx
          cat > /etc/nginx/sites-available/panel <<EOF
          server {
              listen 80;
              server_name ${{ secrets.CF_RECORD_NAME }};
              root /var/www/public_html/public;

              index index.php index.html index.htm;

              location / {
                  try_files $uri $uri/ /index.php?$query_string;
              }

              location ~ \.php$ {
                  include snippets/fastcgi-php.conf;
                  fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
              }

              location ~ /\.ht {
                  deny all;
              }
          }
          EOF

          ln -s /etc/nginx/sites-available/panel /etc/nginx/sites-enabled/
          nginx -t && systemctl restart nginx

      - name: 🌐 Setup Cloudflare Tunnel
        run: |
          echo "🌐 Installing and activating Cloudflare Tunnel..."
          apt install -y cloudflared
          cloudflared service install ${{ secrets.CF_TUNNEL_TOKEN }}

      - name: 🎮 Install Minecraft Egg (Pterodactyl)
        run: |
          mkdir -p /var/www/public_html/pterodactyl-eggs
          curl -Lo /var/www/public_html/pterodactyl-eggs/minecraft.json https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/java/vanilla.json || true

      - name: 🔐 Start tmate SSH Session
        id: tmate
        run: |
          echo "⚙️ Launching tmate..."
          apt install -y tmate
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          SSH=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
          echo "ssh_link=$SSH" >> $GITHUB_OUTPUT
          echo "$SSH" > "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"

      - name: 📦 Backup current VPS state
        run: |
          name="${{ github.event.client_payload.vps_name || 'manual-vps' }}"
          zip -r ".backup/$name.zip" /var/www/public_html -x ".git/*" ".github/*" ".backup/*" || true

      - name: 📤 Push backup & SSH to repo
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "🔁 Backup & SSH update for ${{ github.event.client_payload.vps_name || 'manual-vps' }}"
          file_pattern: 'links/*.txt .backup/*.zip'

      - name: 📩 Discord Notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "content": "✅ New VPS ready with Pterodactyl Panel\n🔐 SSH: `${{ steps.tmate.outputs.ssh_link }}`\n🌐 Domain: https://${{ secrets.CF_RECORD_NAME }}\n🕒 Will reset in 6h with auto-backup."
               }' \
               "$DISCORD_WEBHOOK"

      - name: 🕒 Keep VPS Alive
        run: |
          echo "⏳ VPS running for 6 hours..."
          sleep $((360 * 60))

  delete-vps:
    if: always()
    needs: deploy-vps
    runs-on: ubuntu-latest
    steps:
      - name: 🧹 Notify and Clean Up
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "content": "🧹 VPS session expired. New instance will be auto-deployed."
               }' \
               "$DISCORD_WEBHOOK"
               
