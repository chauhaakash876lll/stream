name: Create and Restore VPS with Pterodactyl & Cloudflare Auto-DNS

on:
  workflow_dispatch:
  repository_dispatch:
    types: [create-vps]

jobs:
  start-vps:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v3

      - name: 📁 Create dirs
        run: mkdir -p links .backup

      - name: 💾 Restore backup
        run: |
          name="${{ github.event.client_payload.vps_name || 'manual-vps' }}"
          if [ "${{ github.event.client_payload.backup }}" == "true" ]; then
            echo "📦 Restoring backup..."
            unzip ".backup/$name.zip" -d /root/ || echo "⚠️ No backup to restore."

      - name: 🧱 Install Pterodactyl Panel
        run: |
          echo "🚀 Installing Pterodactyl Panel..."
          apt update -y && apt upgrade -y
          apt install -y nginx mysql-server php php-fpm php-mysql php-cli php-curl php-mbstring php-xml php-bcmath unzip curl tar composer

          cd /var/www
          curl -Lo panel.tar.gz https://github.com/pterodactyl/panel/releases/latest/download/panel.tar.gz
          tar -xzvf panel.tar.gz
          cd /var/www/panel
          cp .env.example .env
          composer install --no-dev --optimize-autoloader
          php artisan key:generate --force
          php artisan p:environment:setup --force
          php artisan p:database:setup --force
          php artisan migrate --seed --force
          chown -R www-data:www-data /var/www/panel
          chmod -R 755 /var/www/panel
          systemctl restart nginx

      - name: 🌐 Setup Cloudflare DNS Record
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
          CF_RECORD_NAME: ${{ secrets.CF_RECORD_NAME }}
        run: |
          echo "🌐 Creating A record for domain..."
          PUBLIC_IP=$(curl -s http://checkip.amazonaws.com)
          curl -X POST "https://api.cloudflare.com/client/v4/zones/$CF_ZONE_ID/dns_records" \
               -H "Authorization: Bearer $CF_API_TOKEN" \
               -H "Content-Type: application/json" \
               --data '{
                 "type": "A",
                 "name": "'$CF_RECORD_NAME'",
                 "content": "'$PUBLIC_IP'",
                 "ttl": 120,
                 "proxied": true
               }'

      - name: 🔐 Start tmate session
        id: tmate
        run: |
          echo "⚙️ Launching tmate..."
          sudo apt install -y tmate
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          SSH=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
          echo "ssh_link=$SSH" >> $GITHUB_OUTPUT
          echo "$SSH" > "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"

      - name: 📦 Save backup
        run: |
          name="${{ github.event.client_payload.vps_name || 'manual-vps' }}"
          zip -r ".backup/$name.zip" /var/www/panel -x ".git/*" ".github/*" ".backup/*" || true

      - name: 📤 Push backup and SSH link
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "🔁 Updated SSH + Pterodactyl backup for ${{ github.event.client_payload.vps_name || 'manual-vps' }}"
          file_pattern: 'links/*.txt .backup/*.zip'

      - name: 📩 Send Discord DM
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "content": "🖥️ New VPS with Pterodactyl is ready! SSH: `${{ steps.tmate.outputs.ssh_link }}`\n🌐 Domain: https://${{ secrets.CF_RECORD_NAME }}\n⏳ VPS will auto-recycle every 6h with backup."
               }' \
               "$DISCORD_WEBHOOK"

      - name: ⏳ Keep session alive
        run: |
          echo "⏳ Keeping session alive for 6 hours..."
          sleep $((360 * 60))

  delete-vps:
    if: always()
    needs: start-vps
    runs-on: ubuntu-latest
    steps:
      - name: 🧹 Cleanup VPS and Notify
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          echo "🧹 VPS session expired and has been deleted."
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "content": "🧹 VPS session expired. New instance will be auto-redeployed."
               }' \
               "$DISCORD_WEBHOOK"
               
