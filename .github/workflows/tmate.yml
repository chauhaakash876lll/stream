name: Create VPS

on:
  workflow_dispatch:
  repository_dispatch:
    types: [create-vps]

jobs:
  start-vps:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v3

      - name: 📁 Create required directories
        run: mkdir -p links .backup

      - name: ⚙️ Detect and restore backup if exists
        run: |
          name="${{ github.event.client_payload.vps_name || 'manual-vps' }}"
          if [ -f ".backup/$name.zip" ]; then
            echo "📦 Found previous backup. Restoring..."
            unzip ".backup/$name.zip" -d /tmp/restore-data
            sudo rsync -a /tmp/restore-data/ / --exclude='.git' || echo "⚠️ Restore failed."
          else
            echo "ℹ️ No backup found. Assuming first time setup."
          fi

      - name: 🔐 Start tmate SSH session
        run: |
          echo "⚙️ Launching tmate session..."
          sudo apt update && sudo apt install -y tmate
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          SSH=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
          echo "$SSH" > "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"
          echo "✅ SSH Ready: $SSH"
          echo "::set-output name=ssh::$SSH"

      - name: 📦 Backup VPS data before destroy
        run: |
          name="${{ github.event.client_payload.vps_name || 'manual-vps' }}"
          echo "📦 Creating backup..."
          mkdir -p .backup-tmp
          sudo rsync -a --exclude='.git' --exclude='.github' --exclude='.backup' / .backup-tmp/
          cd .backup-tmp && zip -r "../.backup/$name.zip" .

      - name: 📤 Push backup + SSH info
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "🔁 Auto backup + SSH for ${{ github.event.client_payload.vps_name || 'manual-vps' }}"
          file_pattern: 'links/*.txt .backup/*.zip'

      - name: 📩 Send SSH to Discord
        run: |
          SSH=$(cat "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt")
          curl -X POST "${{ secrets.DISCORD_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{"content": "🆕 New VPS SSH: '"$SSH"'\n🔁 This session will last 6h then auto-recycle."}'

      - name: ⏳ Keep alive for 6 hours then cleanup
        run: |
          echo "⏳ Keeping session alive for 6 hours..."
          sleep $((360 * 60))

          echo "🧹 VPS session expired. Cleaning up..."
          sudo shutdown now
          
